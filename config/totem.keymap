//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&lt {
    flavor = "balanced";
    quick-tap-ms = <175>;
    tapping-term-ms = <280>;
    require-prior-idle-ms = <50>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_fj_caps_word {
            bindings = <&caps_word>;
            key-positions = <13 16>;
        };

        combo_qw_esc {
            bindings = <&td_esc_capslock>;
            key-positions = <0 1>;
        };

        combo_as_gui_alt {
            bindings = <&sk LA(LCMD)>;
            key-positions = <10 11>;
        };

        combo_sd_alt_shift {
            bindings = <&sk LA(LSHIFT)>;
            key-positions = <11 12>;
        };

        combo_df_ctrl_shift {
            bindings = <&sk LS(LCTRL)>;
            key-positions = <12 13>;
        };

        combo_sf_ctrl_alt {
            bindings = <&sk LA(LCTRL)>;
            key-positions = <13 11>;
        };

        combo_ad_gui_shift {
            bindings = <&sk LS(LEFT_GUI)>;
            key-positions = <10 12>;
        };

        combo_af_gui_ctrl {
            bindings = <&sk LC(LGUI)>;
            key-positions = <10 13>;
        };

        combo_qs_alt {
            bindings = <&sk LALT>;
            key-positions = <0 11>;
        };

        combo_wd_shift {
            bindings = <&sk LSHFT>;
            key-positions = <12 1>;
        };

        combo_ef_ctrl {
            bindings = <&sk LCTRL>;
            key-positions = <13 2>;
        };

        combo_ag_gui {
            bindings = <&sk LGUI>;
            key-positions = <10 14>;
        };

        combo_asd_gui_alt_shift {
            bindings = <&sk LA(LS(LGUI))>;
            key-positions = <10 11 12>;
        };

        combo_asf_gui_alt_ctrl {
            bindings = <&sk LA(LC(LGUI))>;
            key-positions = <10 11 13>;
        };

        combo_adf_gui_shift_ctrl {
            bindings = <&sk LS(LC(LGUI))>;
            key-positions = <10 12 13>;
        };

        combo_sdf_alt_shift_ctrl {
            bindings = <&sk LS(LC(LALT))>;
            key-positions = <11 12 13>;
        };

        combo_asdf_gui_alt_shift_ctrl {
            bindings = <&sk LS(LA(LC(LGUI)))>;
            key-positions = <10 11 12 13>;
        };

        combo_lp_gui_alt {
            bindings = <&sk LA(LGUI)>;
            key-positions = <18 19>;
        };

        combo_kl_shift_alt {
            bindings = <&sk LA(LSHIFT)>;
            key-positions = <17 18>;
        };

        combo_jk_ctrl_shift {
            bindings = <&sk LC(LSHIFT)>;
            key-positions = <16 17>;
        };

        combo_jp_ctrl_gui {
            bindings = <&sk LC(LGUI)>;
            key-positions = <16 19>;
        };

        combo_kp_shift_gui {
            bindings = <&sk LS(LGUI)>;
            key-positions = <17 19>;
        };

        combo_jl_ctrl_alt {
            bindings = <&sk LC(LALT)>;
            key-positions = <16 18>;
        };

        combo_ko_shift {
            bindings = <&sk LSHIFT>;
            key-positions = <17 8>;
        };

        combo_lsemicolon_alt {
            bindings = <&sk LALT>;
            key-positions = <18 9>;
        };

        combo_ji_ctrl {
            bindings = <&sk LCTRL>;
            key-positions = <16 7>;
        };

        combo_hp_gui {
            bindings = <&sk LGUI>;
            key-positions = <15 19>;
        };

        combo_klp_shift_alt_gui {
            bindings = <&sk LS(LA(LGUI))>;
            key-positions = <17 18 19>;
        };

        combo_jlp_ctrl_alt_gui {
            bindings = <&sk LC(LA(LGUI))>;
            key-positions = <16 18 19>;
        };

        combo_jkp_ctrl_shift_gui {
            bindings = <&sk LS(LC(LGUI))>;
            key-positions = <16 17 19>;
        };

        combo_jkl_ctrl_shift_alt {
            bindings = <&sk LC(LS(LEFT_ALT))>;
            key-positions = <16 17 18>;
        };

        combo_jklp_ctrl_shift_alt_gui {
            bindings = <&sk LS(LA(LC(LGUI)))>;
            key-positions = <16 17 18 19>;
        };

        combo_bgraveaccent_bt0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <25 20>;
        };

        combo_ba_bt1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <25 10>;
        };

        combo_bs_bt2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <25 11>;
        };

        combo_bd_bt3 {
            bindings = <&bt BT_SEL 3>;
            key-positions = <25 12>;
        };

        combo_bf_bt4 {
            bindings = <&bt BT_SEL 4>;
            key-positions = <25 13>;
        };

        combo_bt_bt {
            bindings = <&bt BT_CLR>;
            key-positions = <25 4>;
        };

        combo_gm_1 {
            bindings = <&kp N1>;
            key-positions = <27 14>;
        };

        combo_gcomma_2 {
            bindings = <&kp N2>;
            key-positions = <28 14>;
        };

        combo_gperiod_3 {
            bindings = <&kp N3>;
            key-positions = <29 14>;
        };

        combo_gj_4 {
            bindings = <&kp N4>;
            key-positions = <16 14>;
        };

        combo_gk_5 {
            bindings = <&kp N5>;
            key-positions = <17 14>;
        };

        combo_gl_6 {
            bindings = <&kp N6>;
            key-positions = <18 14>;
        };

        combo_gu_7 {
            bindings = <&kp N7>;
            key-positions = <6 14>;
        };

        combo_gi_8 {
            bindings = <&kp N8>;
            key-positions = <7 14>;
        };

        combo_go_9 {
            bindings = <&kp N9>;
            key-positions = <8 14>;
        };

        combo_gsemicolon_0 {
            bindings = <&kp N0>;
            key-positions = <9 14>;
        };

        combo_gh_equal {
            bindings = <&kp EQUAL>;
            key-positions = <15 14>;
        };

        combo_gp_minus {
            bindings = <&kp MINUS>;
            key-positions = <19 14>;
        };

        combo_gy_bracket {
            bindings = <&td_bracket>;
            key-positions = <5 14>;
        };

        combo_gn_parenthesis {
            bindings = <&td_parenthesis>;
            key-positions = <26 14>;
        };

        combo_ncomma_lang1 {
            bindings = <&kp LANG_HANGEUL>;
            key-positions = <28 26>;
        };

        combo_nperiod_lang2 {
            bindings = <&kp LANG_HANJA>;
            key-positions = <29 26>;
        };

        combo_vm_f1 {
            bindings = <&kp F1>;
            key-positions = <24 27>;
        };

        combo_vcomma_f2 {
            bindings = <&kp F2>;
            key-positions = <24 28>;
        };

        combo_vperiod_f3 {
            bindings = <&kp F3>;
            key-positions = <24 29>;
        };

        combo_vj_f4 {
            bindings = <&kp F4>;
            key-positions = <24 16>;
        };

        combo_vk_f5 {
            bindings = <&kp F5>;
            key-positions = <24 17>;
        };

        combo_vl_f6 {
            bindings = <&kp F6>;
            key-positions = <24 18>;
        };

        combo_vu_f7 {
            bindings = <&kp F7>;
            key-positions = <24 6>;
        };

        combo_vi_f8 {
            bindings = <&kp F8>;
            key-positions = <24 7>;
        };

        combo_vo_f9 {
            bindings = <&kp F9>;
            key-positions = <24 8>;
        };

        combo_vsemicolon_f10 {
            bindings = <&kp F10>;
            key-positions = <24 9>;
        };

        combo_vp_f11 {
            bindings = <&kp F11>;
            key-positions = <24 19>;
        };

        combo_vslash_f12 {
            bindings = <&kp F12>;
            key-positions = <24 30>;
        };

        combo_vh_mute {
            bindings = <&kp C_MUTE>;
            key-positions = <24 15>;
        };

        combo_vu_volumeup {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <24 5>;
        };

        combo_vn_volumndown {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <24 26>;
        };

        combo_vui_brightup {
            bindings = <&kp C_BRIGHTNESS_INC>;
            key-positions = <24 6 7>;
        };

        combo_vmcomma_brightdown {
            bindings = <&kp C_BRIGHTNESS_DEC>;
            key-positions = <24 27 28>;
        };

        combo_vjk_bright_min {
            bindings = <&kp C_BRIGHTNESS_MINIMUM>;
            key-positions = <24 16 17>;
        };

        combo_re_lnav {
            bindings = <&tog 1>;
            key-positions = <2 3>;
        };

        combo_fz_ctrl_z {
            bindings = <&kp LC(Z)>;
            key-positions = <13 21>;
        };

        combo_fx_ctrl_x {
            bindings = <&kp LC(X)>;
            key-positions = <13 22>;
        };

        combo_fc_ctrl_c {
            bindings = <&kp LC(C)>;
            key-positions = <13 23>;
        };

        combo_fv_ctrl_v {
            bindings = <&kp LC(V)>;
            key-positions = <13 24>;
        };

        combo_vcx_leftnumpad {
            bindings = <&tog 2>;
            key-positions = <22 23 24>;
        };

        combo_fspace_ctrl_space {
            bindings = <&kp LC(SPACE)>;
            key-positions = <13 34>;
        };
    };

    macros {
        accent: acute {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>;

            label = "ACUTE";
        };

        sql01: sql01 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sql01 &kp LS(S) &kp LS(E) &kp LS(L) &kp LS(E) &kp LS(C) &kp LS(T) &kp RET &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp STAR &kp RET &kp LS(F) &kp LS(R) &kp LS(O) &kp LS(M) &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp E &kp C &kp O &kp M &kp M &kp R &kp E &kp T &kp A &kp I &kp L &kp DOT &kp RET &kp LS(W) &kp LS(H) &kp LS(E) &kp LS(R) &kp LS(E) &kp SPACE &kp N1 &kp EQUAL &kp N1>;
            label = "SQL01";
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
            require-prior-idle-ms = <50>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
            require-prior-idle-ms = <50>;
        };

        a_acute: a_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "A_ACUTE";
            bindings = <&accent RA(E) A>, <&accent RA(E) LS(A)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_acute: o_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "O_ACUTE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(E) O>, <&accent RA(E) LS(O)>;
        };

        e_acute: e_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "E_ACUTE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(E) E>, <&accent RA(E) LS(E)>;
        };

        i_acute: i_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "I_ACUTE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(E) I>, <&accent RA(E) LS(I)>;
        };

        u_acute: u_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "U_ACUTE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(E) U>, <&accent RA(E) LS(U)>;
        };

        a_tilde: a_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "A_TILDE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(N) A>, <&accent RA(N) LS(A)>;
        };

        o_tilde: o_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "O_TILDE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(N) O>, <&accent RA(N) LS(O)>;
        };

        a_circ: a_circ {
            compatible = "zmk,behavior-mod-morph";
            label = "A_CIRC";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(I) A>, <&accent RA(I) LS(A)>;
        };

        o_circ: o_circ {
            compatible = "zmk,behavior-mod-morph";
            label = "O_CIRC";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(I) O>, <&accent RA(I) LS(O)>;
        };

        e_circ: e_circ {
            compatible = "zmk,behavior-mod-morph";
            label = "E_CIRC";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(I) E>, <&accent RA(I) LS(E)>;
        };

        a_grave: a_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "A_GRAVE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(GRAVE) A>, <&accent RA(GRAVE) LS(A)>;
        };

        thl: thl {
            compatible = "zmk,behavior-hold-tap";
            label = "THL";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            tapping-term-ms = <280>;
            hold-trigger-key-positions = <5 15 26 7 8 9 17 18 19 28 29 30 31 16 27 6 35 36 37>;
            hold-trigger-on-release;
            quick-tap-ms = <125>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
        };

        thr: thr {
            compatible = "zmk,behavior-hold-tap";
            label = "THR";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <125>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
        };

        td_bracket: td_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BRACKET";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        td_esc_capslock: td_esc_capslock {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ESC_CAPSLOCK";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp CAPSLOCK>;
        };

        td_parenthesis: td_parenthesis {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PARENTHESIS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
           &kp Q  &kp W  &kp E        &kp R    &kp T        &kp Y      &kp U     &kp I       &kp O    &kp SEMICOLON
           &kp A  &kp S  &kp D        &kp F    &kp G        &kp H      &kp J     &kp K       &kp L    &kp P
&kp GRAVE  &kp Z  &kp X  &kp C        &kp V    &kp B        &kp N      &kp M     &kp COMMA   &kp DOT  &kp FSLH       &kp NON_US_BACKSLASH
                         &kp LS(TAB)  &kp TAB  &kp SPACE    &kp ENTER  &kp BSPC  &kp DELETE
            >;
        };

        nav_layer {
            bindings = <
       &none     &none         &none        &none      &none        &kp PG_UP  &kp HOME  &kp UP_ARROW  &kp END    &none
       &kp LGUI  &kp LEFT_ALT  &kp LSHIFT   &kp LCTRL  &none        &kp PG_DN  &kp LEFT  &kp DOWN      &kp RIGHT  &none
&none  &none     &none         &none        &none      &none        &none      &none     &none         &none      &none  &none
                               &kp LS(TAB)  &kp TAB    &kp SPACE    &kp ENTER  &kp BSPC  &kp DELETE
            >;
        };

        leftnumpad {
            bindings = <
               &td_bracket  &kp N7  &kp N8       &kp N9   &kp N0             &trans     &trans     &trans      &trans    &trans
               &kp MINUS    &kp N4  &kp N5       &kp N6   &kp EQUAL          &trans     &kp LCTRL  &kp LSHIFT  &kp LALT  &kp LGUI
&kp BACKSLASH  &kp SLASH    &kp N1  &kp N2       &kp N3   &td_parenthesis    &trans     &trans     &trans      &trans    &trans    &trans
                                    &kp LS(TAB)  &kp TAB  &kp SPACE          &kp ENTER  &kp BSPC   &kp DELETE
            >;
        };

        mouse {
            bindings = <
        &trans    &none     &none        &none      &none        &mmv MOVE_Y(600)   &mmv MOVE_X(-600)  &mmv MOVE_UP    &mmv MOVE_X(600)  &trans
        &kp LGUI  &kp LALT  &kp LSHIFT   &kp LCTRL  &none        &mmv MOVE_Y(-600)  &mmv MOVE_LEFT     &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &mkp LCLK
&trans  &trans    &trans    &trans       &trans     &trans       &trans             &trans             &trans          &trans            &trans     &mkp RCLK
                            &kp LS(TAB)  &kp TAB    &kp SPACE    &kp RET            &kp BSPC           &kp DELETE
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
    };
};
