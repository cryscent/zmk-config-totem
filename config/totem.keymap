#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 600  // 기본값: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // 기본값: 10
// #undef MOVE_X
// #define MOVE_X(x) ((x) * ZMK_POINTING_DEFAULT_MOVE_VAL / 600)
// #undef MOVE_Y
// #define MOVE_Y(x) ((x) * ZMK_POINTING_DEFAULT_MOVE_VAL / 600)

// 마우스 이동 속도 상수 정의
#define M1500 1500
#define MOVE_RIGHT1500 M1500
#define MOVE_LEFT1500 -M1500
#define MOVE_UP1500 M1500
#define MOVE_DOWN1500 -M1500

// #define MOVE_X1800 1800   // 오른쪽 1800만큼 이동
// #define MOVE_XM1800 -1800 // 왼쪽 1800만큼 이동
// #define MOVE_Y1800 1800   // 아래 1800만큼 이동
// #define MOVE_YM1800 -1800 // 위 1800만큼 이동

// #define MOVE_X3000 3000   // 오른쪽 3000만큼 이동
// #define MOVE_XM3000 -3000 // 왼쪽 3000만큼 이동
// #define MOVE_Y3000 3000   // 아래 3000만큼 이동
// #define MOVE_YM3000 -3000 // 위 3000만큼 이동

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&lt {
    flavor = "balanced";
    quick-tap-ms = <175>;
    tapping-term-ms = <280>;
    require-prior-idle-ms = <50>;
    retro-tap;
};

&mmv { acceleration-exponent = <2>; };

&msc { acceleration-exponent = <1>; };

/ {
    combos {
        compatible = "zmk,combos";

        // ▄▄▄▄ layers
        // ▄▄▄▄ modifiers
        // ▄▄▄▄ keys

        cb_nmcomma_kor_eng {
            bindings = <&kp LANGUAGE_1>;
            key-positions = <26 27 28>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        cb_mcommaperiod_chn {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <27 28 29>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        cb_wer_esc {
            bindings = <&td_esc_capslock>;
            key-positions = <1 2 3>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        cb_yui_pgup {
            bindings = <&kp PG_UP>;
            key-positions = <6 5 7>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        cb_hjk_pgdn {
            bindings = <&kp PG_DN>;
            key-positions = <15 16 17>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        cb_uio_home {
            bindings = <&kp HOME>;
            key-positions = <8 7 6>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        cb_jkl_end {
            bindings = <&kp END>;
            key-positions = <16 17 18>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        cb_jk_ctrl_shift {
            bindings = <&mc_wait200_r_homerow>;
            key-positions = <16 17>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        cb_fd_ctrl_shift {
            bindings = <&mc_wait200_l_homerow>;
            key-positions = <12 13>;
            require-prior-idle-ms = <150>;
        };

        cb_gf_ctrl {
            bindings = <&mc_wait200_l_homerow>;
            key-positions = <14 13>;
            require-prior-idle-ms = <150>;
        };

        cb_hj_ctrl {
            bindings = <&mc_wait200_l_homerow>;
            key-positions = <16 15>;
            require-prior-idle-ms = <150>;
        };

        cb_bv_layer_m {
            bindings = <&tog 1>;
            key-positions = <24 25>;
            require-prior-idle-ms = <150>;
        };

        cb_tr_layer_np {
            bindings = <&tog 6>;
            key-positions = <3 4>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        accent: acute {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>;

            label = "ACUTE";
        };

        sql01: sql01 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sql01 &kp LS(S) &kp LS(E) &kp LS(L) &kp LS(E) &kp LS(C) &kp LS(T) &kp RET &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp STAR &kp RET &kp LS(F) &kp LS(R) &kp LS(O) &kp LS(M) &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp E &kp C &kp O &kp M &kp M &kp R &kp E &kp T &kp A &kp I &kp L &kp DOT &kp RET &kp LS(W) &kp LS(H) &kp LS(E) &kp LS(R) &kp LS(E) &kp SPACE &kp N1 &kp EQUAL &kp N1>;
            label = "SQL01";
        };

        mouse_right_3x: mouse_right_3x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_X(1800)>;
            label = "MOUSE_RIGHT_3X";
            wait-ms = <30>;
            tap-ms = <150>;
        };

        mouse_left_3x: mouse_left_3x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_X(-1800)>;
            label = "MOUSE_LEFT_3x";
            wait-ms = <30>;
            tap-ms = <150>;
        };

        mouse_up_3x: mouse_up_3x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_Y(-1800)>;
            label = "MOUSE_UP_3x";
            wait-ms = <30>;
            tap-ms = <150>;
        };

        mouse_down_3x: mouse_down_3x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_Y(1800)>;
            label = "MOUSE_DOWN_3x";
            wait-ms = <30>;
            tap-ms = <150>;
        };

        mouse_right_6x: mouse_roght_6x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_X(3600)>;
            label = "MOUSE_ROGHT_6x";
            wait-ms = <30>;
            tap-ms = <150>;
        };

        mouse_left_6x: mouse_left_6x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_X(-3600)>;
            label = "MOUSE_LEFT_6x";
            wait-ms = <30>;
            tap-ms = <150>;
        };

        mouse_up_6x: mouse_up_6x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_Y(-3600)>;
            label = "MOUSE_UP_6x";
            wait-ms = <30>;
            tap-ms = <150>;
        };

        mouse_down_6x: mouse_down_6x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_Y(3600)>;
            label = "MOUSE_DOWN_6x";
            wait-ms = <30>;
            tap-ms = <150>;
        };

        mc_wait250_l_homerow: pause {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_wait_time 250>, <&mo 7>;

            label = "PAUSE";
        };

        mc_wait200_l_homerow: mc_wait200_l_homerow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_wait_time 200>, <&mo 7>;

            label = "MC_WAIT200_L_HOMEROW";
        };

        mc_wait250_r_homerow: mc_wait250_r_homerow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_wait_time 250>, <&mo 8>;

            label = "MC_WAIT250_R_HOMEROW";
        };

        mc_wait200_r_homerow: mc_wait200_r_homerow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_wait_time 200>, <&mo 8>;

            label = "MC_WAIT200_R_HOMEROW";
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
            require-prior-idle-ms = <50>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
            require-prior-idle-ms = <50>;
        };

        a_acute: a_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "A_ACUTE";
            bindings = <&accent RA(E) A>, <&accent RA(E) LS(A)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_acute: o_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "O_ACUTE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(E) O>, <&accent RA(E) LS(O)>;
        };

        e_acute: e_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "E_ACUTE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(E) E>, <&accent RA(E) LS(E)>;
        };

        i_acute: i_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "I_ACUTE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(E) I>, <&accent RA(E) LS(I)>;
        };

        u_acute: u_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "U_ACUTE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(E) U>, <&accent RA(E) LS(U)>;
        };

        a_tilde: a_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "A_TILDE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(N) A>, <&accent RA(N) LS(A)>;
        };

        o_tilde: o_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "O_TILDE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(N) O>, <&accent RA(N) LS(O)>;
        };

        a_circ: a_circ {
            compatible = "zmk,behavior-mod-morph";
            label = "A_CIRC";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(I) A>, <&accent RA(I) LS(A)>;
        };

        o_circ: o_circ {
            compatible = "zmk,behavior-mod-morph";
            label = "O_CIRC";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(I) O>, <&accent RA(I) LS(O)>;
        };

        e_circ: e_circ {
            compatible = "zmk,behavior-mod-morph";
            label = "E_CIRC";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(I) E>, <&accent RA(I) LS(E)>;
        };

        a_grave: a_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "A_GRAVE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(GRAVE) A>, <&accent RA(GRAVE) LS(A)>;
        };

        thl: thl {
            compatible = "zmk,behavior-hold-tap";
            label = "THL";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            tapping-term-ms = <280>;
            hold-trigger-key-positions = <5 15 26 7 8 9 17 18 19 28 29 30 31 16 27 6 35 36 37>;
            hold-trigger-on-release;
            quick-tap-ms = <125>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
        };

        thr: thr {
            compatible = "zmk,behavior-hold-tap";
            label = "THR";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <125>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
        };

        td_bracket: td_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BRACKET";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            tapping-term-ms = <200>;
        };

        td_esc_capslock: td_esc_capslock {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ESC_CAPSLOCK";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp CAPSLOCK>;

            tapping-term-ms = <200>;
        };

        td_parenthesis: td_parenthesis {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PARENTHESIS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            tapping-term-ms = <200>;
        };

        mo_to: mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TO";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        td_quote_backslashpipe: td_quote_backslashpipe {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_QUOTE_BACKSLASHPIPE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp BACKSLASH>;

            tapping-term-ms = <200>;
        };

        td_quote_underscore: td_quote_underscore {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_QUOTE_UNDERSCORE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp UNDER>;

            tapping-term-ms = <200>;
        };

        td_left_bracket_parenthesis: td_left_bracket_parenthesis {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LEFT_BRACKET_PARENTHESIS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_PARENTHESIS>;

            tapping-term-ms = <200>;
        };

        td_right_bracket_parenthesis: td_right_bracket_parenthesis {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RIGHT_BRACKET_PARENTHESIS";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_PARENTHESIS>;

            tapping-term-ms = <200>;
        };

        td_f: td_f {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_F";
            #binding-cells = <0>;
            bindings = <&kp F>, <&kp LCTRL>, <&kp F>;

            tapping-term-ms = <200>;
        };

        td_d: td_d {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_D";
            #binding-cells = <0>;
            bindings = <&kp D>, <&kp LSHIFT>, <&kp D>;

            tapping-term-ms = <200>;
        };

        td_s: td_s {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_S";
            #binding-cells = <0>;
            bindings = <&kp S>, <&kp LALT>, <&kp S>;

            tapping-term-ms = <200>;
        };

        td_a: td_a {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_A";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp LGUI>, <&kp A>;

            tapping-term-ms = <200>;
        };

        td_j: td_j {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_J";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp LCTRL>, <&kp J>;

            tapping-term-ms = <200>;
        };

        td_k: td_k {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_K";
            #binding-cells = <0>;
            bindings = <&kp K>, <&kp LSHIFT>, <&kp K>;

            tapping-term-ms = <200>;
        };

        td_l: td_l {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_L";
            #binding-cells = <0>;
            bindings = <&kp L>, <&kp LALT>, <&kp L>;

            tapping-term-ms = <200>;
        };

        td_semicolon: td_semicolon {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SEMICOLON";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp LGUI>, <&kp SEMICOLON>;

            tapping-term-ms = <200>;
        };

        td_tab_l_ctrl_r_nav_bracket_ins: td_tab_l_ctrl_r_nav_bracket_ins {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TAB_L_CTRL_R_NAV_BRACKET_INS";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&lt 4 TAB>;

            tapping-term-ms = <200>;
        };

        td_und_l_thumb_r_mmoderate: td_und_l_thumb_r_mmoderate {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_UND_L_THUMB_R_MMODERATE";
            #binding-cells = <0>;
            bindings = <&kp UNDERSCORE>, <&lt 1 UNDERSCORE>;

            tapping-term-ms = <200>;
        };

        td_graveaccent_l_pinky_np: td_graveaccent_l_pinky_np {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_GRAVEACCENT_L_PINKY_NP";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&lt 6 GRAVE>;

            tapping-term-ms = <200>;
        };

        td_bspc_bt_fn: td_bspc_bt_fn {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BSPC_BT_FN";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&lt 5 BSPC>;

            tapping-term-ms = <200>;
        };

        hold_mkp: hold_mkp {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_MKP";
            bindings = <&kp>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
            retro-tap;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {

            label = "BASE";

            bindings = <
             &kp Q    &kp W    &kp E             &kp R      &kp T        &kp Y      &kp U       &kp I      &kp O    &kp P
             &lt 7 A  &lt 7 S  &lt 7 D           &lt 7 F    &lt 7 G      &lt 8 H    &lt 8 J     &lt 8 K    &lt 8 L  &lt 8 SEMI
&lt 6 GRAVE  &kp Z    &kp X    &kp C             &kp V      &kp B        &kp N      &kp M       &kp COMMA  &kp DOT  &kp FSLH    &kp SINGLE_QUOTE
                               &lt 1 UNDERSCORE  &lt 4 TAB  &kp SPACE    &kp ENTER  &lt 5 BSPC  &kp DEL
            >;
        };

        und_r_mmoderate {
            bindings = <
       &none     &none                &mo 3       &none                 &none        &msc MOVE_Y(20)   &msc MOVE_X(-20)  &mmv MOVE_UP     &msc MOVE_X(20)  &none
       &kp LGUI  &hold_mkp LALT LCLK  &kp LSHIFT  &hold_mkp LCTRL RCLK  &none        &msc MOVE_Y(-20)  &mmv MOVE_LEFT    &mmv MOVE_DOWN   &mmv MOVE_RIGHT  &mkp LCLK
&none  &none     &none                &mo 2       &none                 &none        &none             &none             &none            &none            &none      &mkp RCLK
                                      &none       &lt 4 TAB             &kp SPACE    &kp RET           &lt 5 BSPC        &kp DELETE
            >;
        };

        und_c_r_mslow {
            bindings = <
       &none     &none                &none        &none                 &none        &msc MOVE_Y(10)   &msc MOVE_X(-10)  &mmv MOVE_UP    &msc MOVE_X(10)  &none
       &kp LGUI  &hold_mkp LALT LCLK  &kp LSHIFT   &hold_mkp LCTRL RCLK  &none        &msc MOVE_Y(-10)  &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp LCLK
&none  &none     &none                &none        &none                 &none        &none             &none             &none           &none            &none      &mkp RCLK
                                      &lt 1 UNDER  &lt 4 TAB             &kp SPACE    &kp RET           &lt 5 BSPC        &kp DELETE
            >;
        };

        und_e_r_mfast {
            bindings = <
       &none     &none                &none        &none                 &none        &msc MOVE_Y(10)   &msc MOVE_X(-10)   &mmv 0 -1500    &msc MOVE_X(10)     &none
       &kp LGUI  &hold_mkp LALT LCLK  &kp LSHIFT   &hold_mkp LCTRL RCLK  &none        &msc MOVE_Y(-10)  &mmv -1500 0       &mmv 0 1500     &mmv 1500 0         &mkp LCLK
&none  &none     &none                &none        &none                 &none        &none             &none              &none           &none               &none      &mkp RCLK
                                      &lt 1 UNDER  &lt 4 TAB             &kp SPACE    &kp RET           &lt 5 BSPC         &kp DELETE
            >;
        };

        tab_l_ctrl_r_nav_brket_ins_lang {
            bindings = <
                  &kp LC(Q)  &kp LC(W)  &kp LC(E)    &kp LC(R)  &kp LC(T)    &kp PG_UP  &kp HOME    &kp UP_ARROW                  &kp END                        &kp SCROLLLOCK
                  &kp LGUI   &kp LALT   &kp LSHIFT   &kp LCTRL  &kp LC(G)    &kp PG_DN  &kp LEFT    &kp DOWN                      &kp RIGHT                      &kp INSERT
&td_esc_capslock  &kp LC(Z)  &kp LC(X)  &kp LC(C)    &kp LC(V)  &kp LC(B)    &kp LC(N)  &kp LC(M)   &td_left_bracket_parenthesis  &td_right_bracket_parenthesis  &kp PRINTSCREEN  &kp BACKSLASH
                                        &lt 1 UNDER  &none      &kp SPACE    &kp ENTER  &lt 5 BSPC  &kp DEL
            >;
        };

        bspc_bt_fn {
            bindings = <
            &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &kp C_VOL_UP  &kp F7  &kp F8      &kp F9  &kp F10
            &kp LGUI      &kp LALT      &kp LSHIFT    &kp LCTRL     &kp C_BRI_UP    &kp K_MUTE    &kp F4  &kp F5      &kp F6  &kp F11
&bt BT_CLR  &none         &none         &none         &none         &kp C_BRI_DN    &kp C_VOL_DN  &kp F1  &kp F2      &kp F3  &kp F12  &none
                                        &lt 1 UNDER   &lt 4 TAB     &kp SPACE       &kp ENTER     &none   &kp DELETE
            >;
        };

        l_pinky_np {
            bindings = <
       &none     &none     &none        &none      &none              &kp N6     &kp N7      &kp N8   &kp N9  &kp N0
       &kp LGUI  &kp LALT  &kp LSHIFT   &kp LCTRL  &td_bracket        &kp EQUAL  &kp N4      &kp N5   &kp N6  &kp STAR
&none  &none     &none     &none        &none      &td_parenthesis    &kp MINUS  &kp N1      &kp N2   &kp N3  &kp SLASH  &kp PLUS
                           &lt 1 UNDER  &lt 4 TAB  &kp SPACE          &kp ENTER  &lt 5 BSPC  &kp DEL
            >;
        };

        l_homerow_r_base {
            label = "r_BASE";
            bindings = <
             &kp Q     &kp W     &kp E             &kp R      &kp T        &kp Y      &kp U       &kp I      &kp O    &kp P
             &kp LGUI  &kp LALT  &kp LSHIFT        &kp LCTRL  &none        &kp H      &kp J       &kp K      &kp L    &kp SEMI
&lt 6 GRAVE  &kp Z     &kp X     &kp C             &kp V      &kp B        &kp N      &kp M       &kp COMMA  &kp DOT  &kp FSLH  &kp SINGLE_QUOTE
                                 &lt 1 UNDERSCORE  &lt 4 TAB  &kp SPACE    &kp ENTER  &lt 5 BSPC  &kp DEL
            >;
        };

        r_homerow_l_base {
            label = "l_BASE";
            bindings = <
             &kp Q  &kp W  &kp E             &kp R      &kp T        &kp Y      &kp U       &kp I       &kp O     &kp P
             &kp A  &kp S  &kp D             &kp F      &kp G        &none      &kp LCTRL   &kp LSHIFT  &kp LALT  &kp LGUI
&lt 6 GRAVE  &kp Z  &kp X  &kp C             &kp V      &kp B        &kp N      &kp M       &kp COMMA   &kp DOT   &kp FSLH  &kp SINGLE_QUOTE
                           &lt 1 UNDERSCORE  &lt 4 TAB  &kp SPACE    &kp ENTER  &lt 5 BSPC  &kp DEL
            >;
        };

    };
};
