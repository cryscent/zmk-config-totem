#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&lt {
    flavor = "balanced";
    quick-tap-ms = <175>;
    tapping-term-ms = <280>;
    require-prior-idle-ms = <50>;
};

/ {
    combos {
        compatible = "zmk,combos";

        // ▄▄▄▄ modifiers
        // ▄▄▄▄ layers

        cb_layer_back {
            bindings = <&to 0>;
            key-positions = <4 3>;
        };

        cb_n4 {
            bindings = <&kp N4>;
            key-positions = <3 13>;
        };

        cb_layer_rt3_ms3 {
            bindings = <&mo_to 4 4>;
            key-positions = <3 2>;
        };

        cb_layer_rt3_ms1 {
            bindings = <&mo_to 3 3>;
            key-positions = <3 2 1>;
            timeout-ms = <200>;
        };

        cb_layer_rt1_nav {
            bindings = <&mo_to 1 1>;
            key-positions = <2 1>;
            timeout-ms = <200>;
        };

        cb_layer_rt2_np {
            bindings = <&mo_to 1 1>;
            key-positions = <1 3>;
            timeout-ms = <200>;
        };

        cb_n3 {
            bindings = <&kp N3>;
            key-positions = <2 12>;
        };

        cb_layer_rt4_fn {
            bindings = <&mo_to 5 5>;
            key-positions = <3 0>;
            timeout-ms = <200>;
        };

        // ▄▄▄▄ keys

        cb_fj_caps_word {
            bindings = <&caps_word>;
            key-positions = <13 16>;
            layers = <0>;
            timeout-ms = <200>;
        };

        cb_qw_esc {
            bindings = <&td_esc_capslock>;
            key-positions = <0 1>;
            timeout-ms = <200>;
            layers = <0>;
        };

        cb_as_graveaccent_tilde {
            bindings = <&kp GRAVE>;
            key-positions = <10 11>;
        };

        cb_lsemicolon_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <18 19>;
        };

        cb_n1 {
            bindings = <&kp N1>;
            key-positions = <0 10>;
        };

        cb_n2 {
            bindings = <&kp N2>;
            key-positions = <1 11>;
        };

        cb_n5 {
            bindings = <&kp N5>;
            key-positions = <4 14>;
        };

        cb_n6 {
            bindings = <&kp N6>;
            key-positions = <5 15>;
        };

        cb_n7 {
            bindings = <&kp N7>;
            key-positions = <6 16>;
        };

        cb_n8 {
            bindings = <&kp N8>;
            key-positions = <7 17>;
        };

        cb_n9 {
            bindings = <&kp N9>;
            key-positions = <18 8>;
        };

        cb_n0 {
            bindings = <&kp N0>;
            key-positions = <19 9>;
        };

        cb_layer_back2 {
            bindings = <&to 0>;
            key-positions = <5 6>;
        };

        cb_layer_lt1_nav {
            bindings = <&mo_to 6 6>;
            key-positions = <7 8>;
            timeout-ms = <200>;
        };

        cb_layer_lt2_np {
            bindings = <&mo_to 7 7>;
            key-positions = <8 6>;
            timeout-ms = <200>;
        };

        cb_layer_lt4_fn {
            bindings = <&mo_to 8 8>;
            key-positions = <6 9>;
            timeout-ms = <200>;
        };
    };

    macros {
        accent: acute {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>;

            label = "ACUTE";
        };

        sql01: sql01 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sql01 &kp LS(S) &kp LS(E) &kp LS(L) &kp LS(E) &kp LS(C) &kp LS(T) &kp RET &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp STAR &kp RET &kp LS(F) &kp LS(R) &kp LS(O) &kp LS(M) &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp E &kp C &kp O &kp M &kp M &kp R &kp E &kp T &kp A &kp I &kp L &kp DOT &kp RET &kp LS(W) &kp LS(H) &kp LS(E) &kp LS(R) &kp LS(E) &kp SPACE &kp N1 &kp EQUAL &kp N1>;
            label = "SQL01";
        };

        mouse_right_3x: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_RIGHT &mmv MOVE_RIGHT &mmv MOVE_RIGHT>;
            label = "NEW_MACRO";
        };

        mouse_left_3x: mouse_left_3x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_LEFT &mmv MOVE_LEFT &mmv MOVE_LEFT>;
            label = "MOUSE_LEFT_3X";
        };

        mouse_up_3x: mouse_up_3x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_UP &mmv MOVE_UP &mmv MOVE_UP>;
            label = "MOUSE_UP_3X";
        };

        mouse_down_3x: mouse_down_3x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_DOWN &mmv MOVE_DOWN &mmv MOVE_DOWN>;
            label = "MOUSE_DOWN_3X";
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
            require-prior-idle-ms = <50>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
            require-prior-idle-ms = <50>;
        };

        a_acute: a_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "A_ACUTE";
            bindings = <&accent RA(E) A>, <&accent RA(E) LS(A)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_acute: o_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "O_ACUTE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(E) O>, <&accent RA(E) LS(O)>;
        };

        e_acute: e_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "E_ACUTE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(E) E>, <&accent RA(E) LS(E)>;
        };

        i_acute: i_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "I_ACUTE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(E) I>, <&accent RA(E) LS(I)>;
        };

        u_acute: u_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "U_ACUTE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(E) U>, <&accent RA(E) LS(U)>;
        };

        a_tilde: a_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "A_TILDE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(N) A>, <&accent RA(N) LS(A)>;
        };

        o_tilde: o_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "O_TILDE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(N) O>, <&accent RA(N) LS(O)>;
        };

        a_circ: a_circ {
            compatible = "zmk,behavior-mod-morph";
            label = "A_CIRC";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(I) A>, <&accent RA(I) LS(A)>;
        };

        o_circ: o_circ {
            compatible = "zmk,behavior-mod-morph";
            label = "O_CIRC";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(I) O>, <&accent RA(I) LS(O)>;
        };

        e_circ: e_circ {
            compatible = "zmk,behavior-mod-morph";
            label = "E_CIRC";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(I) E>, <&accent RA(I) LS(E)>;
        };

        a_grave: a_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "A_GRAVE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&accent RA(GRAVE) A>, <&accent RA(GRAVE) LS(A)>;
        };

        thl: thl {
            compatible = "zmk,behavior-hold-tap";
            label = "THL";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            tapping-term-ms = <280>;
            hold-trigger-key-positions = <5 15 26 7 8 9 17 18 19 28 29 30 31 16 27 6 35 36 37>;
            hold-trigger-on-release;
            quick-tap-ms = <125>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
        };

        thr: thr {
            compatible = "zmk,behavior-hold-tap";
            label = "THR";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <125>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
        };

        td_bracket: td_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BRACKET";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            tapping-term-ms = <350>;
        };

        td_esc_capslock: td_esc_capslock {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ESC_CAPSLOCK";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp CAPSLOCK>;

            tapping-term-ms = <350>;
        };

        td_parenthesis: td_parenthesis {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PARENTHESIS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            tapping-term-ms = <350>;
        };

        mo_to: mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TO";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
           &kp Q  &kp W  &kp E  &kp R    &kp T        &kp Y      &kp U     &kp I       &kp O    &kp P
           &kp A  &kp S  &kp D  &kp F    &kp G        &kp H      &kp J     &kp K       &kp L    &kp SEMICOLON
&kp GRAVE  &kp Z  &kp X  &kp C  &kp V    &kp B        &kp N      &kp M     &kp COMMA   &kp DOT  &kp FSLH       &kp NON_US_BACKSLASH
                         &none  &kp TAB  &kp SPACE    &kp ENTER  &kp BSPC  &kp DELETE
            >;
        };

        rt1_nav {
            bindings = <
       &none  &none  &none  &none    &none        &kp PG_UP  &kp HOME  &kp UP_ARROW  &kp END    &none
       &none  &none  &none  &none    &none        &kp PG_DN  &kp LEFT  &kp DOWN      &kp RIGHT  &none
&none  &none  &none  &none  &none    &none        &none      &none     &none         &none      &none  &none
                     &none  &kp TAB  &kp SPACE    &kp ENTER  &kp BSPC  &kp DEL
            >;
        };

        rt2_np {
            bindings = <
       &none  &none  &none  &none    &none        &td_bracket      &kp N7    &kp N8   &kp N9  &kp N0
       &none  &none  &none  &none    &none        &kp EQUAL        &kp N4    &kp N5   &kp N6  &kp MINUS
&none  &none  &none  &none  &none    &none        &td_parenthesis  &kp N1    &kp N2   &kp N3  &kp SLASH  &none
                     &none  &kp TAB  &kp SPACE    &kp ENTER        &kp BSPC  &kp DEL
            >;
        };

        rt3_ms1 {
            bindings = <
       &none  &none             &msc MOVE_Y(20)   &none            &none        &mmv MOVE_Y(200)   &mmv MOVE_X(-200)  &mmv MOVE_UP    &mmv MOVE_X(200)  &msc SCRL_UP
       &none  &msc MOVE_X(-20)  &msc MOVE_Y(-20)  &msc MOVE_X(20)  &none        &mmv MOVE_Y(-200)  &mmv MOVE_LEFT     &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &mkp LCLK
&none  &none  &none             &none             &none            &none        &none              &msc SCRL_LEFT     &none           &msc SCRL_RIGHT   &msc SCRL_DOWN  &mkp RCLK
                                &none             &kp TAB          &kp SPACE    &kp RET            &kp BSPC           &kp DELETE
            >;
        };

        rt3_ms3 {
            bindings = <
       &none  &none  &none  &none    &none        &mmv MOVE_Y(600)   &mmv MOVE_X(-600)  &mouse_up_3x    &mmv MOVE_X(600)  &none
       &none  &none  &none  &none    &none        &mmv MOVE_Y(-600)  &mouse_left_3x     &mouse_down_3x  &mouse_right_3x   &mkp LCLK
&none  &none  &none  &none  &none    &none        &none              &none              &none           &none             &none      &mkp RCLK
                     &none  &kp TAB  &kp SPACE    &kp RET            &kp BSPC           &kp DELETE
            >;
        };

        rt4_fn {
            bindings = <
       &none  &none  &none        &none    &none        &none    &kp F7    &kp F8      &kp F9  &kp F10
       &none  &none  &none        &none    &none        &none    &kp F4    &kp F5      &kp F6  &kp F11
&none  &none  &none  &none        &none    &none        &none    &kp F1    &kp F2      &kp F3  &kp F12  &none
                     &kp LS(TAB)  &kp TAB  &kp SPACE    &kp RET  &kp BSPC  &kp DELETE
            >;
        };

        lt1_nav {
            bindings = <
       &none  &kp HOME  &kp UP       &kp END    &kp PG_UP    &none      &none     &none       &none  &none
       &none  &kp LEFT  &kp DOWN     &kp RIGHT  &kp PG_DN    &none      &none     &none       &none  &none
&none  &none  &none     &none        &none      &none        &none      &none     &none       &none  &none  &none
                        &kp LS(TAB)  &kp TAB    &kp SPACE    &kp ENTER  &kp BSPC  &kp DELETE
            >;
        };

        lt2_np {
            bindings = <
               &td_bracket  &kp N7  &kp N8       &kp N9   &kp N0             &none      &none     &none       &none  &none
               &kp MINUS    &kp N4  &kp N5       &kp N6   &kp EQUAL          &none      &none     &none       &none  &none
&kp BACKSLASH  &kp SLASH    &kp N1  &kp N2       &kp N3   &td_parenthesis    &none      &none     &none       &none  &none  &none
                                    &kp LS(TAB)  &kp TAB  &kp SPACE          &kp ENTER  &kp BSPC  &kp DELETE
            >;
        };

        lt4_fn {
            bindings = <
       &none  &kp F7  &kp F8       &kp F9   &kp F10      &none      &none     &none       &none  &none
       &none  &kp F4  &kp F5       &kp F6   &kp F11      &none      &none     &none       &none  &none
&none  &none  &kp F1  &kp F2       &kp F3   &kp F12      &none      &none     &none       &none  &none  &none
                      &kp LS(TAB)  &kp TAB  &kp SPACE    &kp ENTER  &kp BSPC  &kp DELETE
            >;
        };

        bluetooth {
            bindings = <
       &none         &none         &none         &none         &bt BT_CLR      &none         &none         &none         &none         &none
       &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 3  &bt BT_SEL 1  &bt BT_SEL 0    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&none  &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &none
                                   &none         &none         &none           &none         &none         &none
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
    };
};
